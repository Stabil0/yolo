# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P2-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
kpt_shape: &kpt [17, 3] # number of keypoints, number of dims (2 for x,y or 3 for x,y,visible)
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

# YOLOv8.0 backbone
backbone: &bb
  # [from, repeats, module, args]
  0: [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  1: [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  2: [-1, 3, C2f, [128, True]]
  3: [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  4: [-1, 6, C2f, [256, True]]
  5: [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  6: [-1, 6, C2f, [512, True]]
  7: [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
  8: [-1, 3, C2f, [1024, True]]
  9: [-1, 1, SPPF, [1024, 5]] # 9

# YOLOv8.0-p2 neck
neck: &neck
  10: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  11: [[-1, 6], 1, Concat, [1]] # cat backbone P4
  12: [-1, 3, C2f, [512]] # 12

  13: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  14: [[-1, 4], 1, Concat, [1]] # cat backbone P3
  15: [-1, 3, C2f, [256]] # 15 (P3/8-small)

  16: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  17: [[-1, 2], 1, Concat, [1]] # cat backbone P2
  18: [-1, 3, C2f, [128]] # 18 (P2/4-xsmall)

  19: [-1, 1, Conv, [128, 3, 2]]
  20: [[-1, 15], 1, Concat, [1]] # cat head P3
  21: [-1, 3, C2f, [256]] # 21 (P3/8-small)

  22: [-1, 1, Conv, [256, 3, 2]]
  23: [[-1, 12], 1, Concat, [1]] # cat head P4
  24: [-1, 3, C2f, [512]] # 24 (P4/16-medium)

  25: [-1, 1, Conv, [512, 3, 2]]
  26: [[-1, 9], 1, Concat, [1]] # cat head P5
  27: [-1, 3, C2f, [1024]] # 27 (P5/32-large)

head:
  detect-head: &detect-head
    28: [[18, 21, 24, 27], 1, Detect, [nc]] # Detect(P2, P3, P4, P5)

  segment-head: &segment-head
    28: [[18, 21, 24, 27], 1, Segment, [nc, 32, 256]] # Segment(P2, P3, P4, P5)

  pose-head: &pose-head
    28: [[18, 21, 24, 27], 1, Pose, [nc, *kpt]] # Pose(P2, P3, P4, P5)

  obb-head: &obb-head
    28: [[18, 21, 24, 27], 1, OBB, [nc, 1]] # OBB(P2, P3, P4, P5)

# Models
yolov8-p2:
  <<: [*bb, *neck, *detect-head]
  task: detect
  nc: 80 # number of classes

yolov8-seg-p2:
  <<: [*bb, *neck, *segment-head]
  task: segment
  nc: 80 # number of classes

yolov8-pose-p2:
  <<: [*bb, *neck, *pose-head]
  task: pose
  nc: 1 # number of classes

yolov8-obb-p2:
  <<: [*bb, *neck, *obb-head]
  task: obb
  nc: 15 # number of classes