# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P6 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
kpt_shape: &kpt [17, 3] # number of keypoints, number of dims (2 for x,y or 3 for x,y,visible)
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

# YOLOv8.0 backbone
backbone: &bb
  # [from, repeats, module, args]
  0: [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  1: [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  2: [-1, 3, C2f, [128, True]]
  3: [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  4: [-1, 6, C2f, [256, True]]
  5: [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  6: [-1, 6, C2f, [512, True]]
  7: [-1, 1, Conv, [768, 3, 2]] # 7-P5/32
  8: [-1, 3, C2f, [768, True]]
  9: [-1, 1, Conv, [1024, 3, 2]] # 9-P6/64
  10: [-1, 3, C2f, [1024, True]]
  11: [-1, 1, SPPF, [1024, 5]] # 11

# YOLOv8.0-p2 neck
neck: &neck
  12: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  13: [[-1, 8], 1, Concat, [1]] # cat backbone P5
  14: [-1, 3, C2, [768, False]] # 14

  15: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  16: [[-1, 6], 1, Concat, [1]] # cat backbone P4
  17: [-1, 3, C2, [512, False]] # 17

  18: [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  19: [[-1, 4], 1, Concat, [1]] # cat backbone P3
  20: [-1, 3, C2, [256, False]] # 20 (P3/8-small)

  21: [-1, 1, Conv, [256, 3, 2]]
  22: [[-1, 17], 1, Concat, [1]] # cat head P4
  23: [-1, 3, C2, [512, False]] # 23 (P4/16-medium)

  24: [-1, 1, Conv, [512, 3, 2]]
  25: [[-1, 14], 1, Concat, [1]] # cat head P5
  26: [-1, 3, C2, [768, False]] # 26 (P5/32-large)

  27: [-1, 1, Conv, [768, 3, 2]]
  28: [[-1, 11], 1, Concat, [1]] # cat head P6
  29: [-1, 3, C2, [1024, False]] # 29 (P6/64-xlarge)

# Heads
detect-head: &detect-head
  30: [[20, 23, 26, 29], 1, Detect, [nc]] # Detect(P3, P4, P5, P6)

segment-head: &segment-head
  30: [[20, 23, 26, 29], 1, Segment, [nc, 32, 256]] # Segment(P3, P4, P5, P6)

pose-head: &pose-head
  30: [[20, 23, 26, 29], 1, Pose, [nc, *kpt]] # Pose(P3, P4, P5, P6)

obb-head: &obb-head
  30: [[20, 23, 26, 29], 1, OBB, [nc, 1]] # OBB(P3, P4, P5, P6)

# Models
yolov8-p6:
  <<: [*bb, *neck, *detect-head]
  task: detect
  nc: 80 # number of classes

yolov8-seg-p6:
  <<: [*bb, *neck, *segment-head]
  task: segment
  nc: 80 # number of classes

yolov8-pose-p6:
  <<: [*bb, *neck, *pose-head]
  task: pose
  nc: 1 # number of classes

yolov8-obb-p6:
  <<: [*bb, *neck, *obb-head]
  task: obb
  nc: 15 # number of classes